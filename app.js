// --- CONFIGURATION (Replace with your actual keys) ---
const GEMINI_API_KEY = 'AIzaSyCcFi-vMO0kj0zrqPuogp86f09oQvu34Ao';
const GEMINI_MODEL = 'gemini-2.5-flash';

// --- NASA API CONFIGURATION ---
// The endpoint for fetching citations in the NTRS OpenAPI
const NASA_NTRS_ENDPOINT = 'https://ntrs.nasa.gov/api/citations/search';

// Main function triggered by the button
async function iniciarBusca() {
    const userInput = document.getElementById('userInput').value.trim();
    const statusElement = document.getElementById('status');
    const resultsBody = document.getElementById('resultsBody');
    
    // Clear results and status
    resultsBody.innerHTML = '';
    statusElement.textContent = 'Waiting for search...';

    if (!userInput) {
        statusElement.textContent = 'Please enter a search term.';
        return;
    }

    try {
        // Step 1: Translate the search with Gemini
        statusElement.textContent = 'Step 1/2: Using AI to translate your search into the NTRS format...';
        const queryEstruturada = await traduzirBusca(userInput);
        
        // Step 2: Search for data in the NASA API
        statusElement.textContent = `Step 2/2: Searching NASA NTRS with the query: "${queryEstruturada}"...`;
        await buscarRelatoriosNASA(queryEstruturada);

        statusElement.textContent = 'Search completed!';
    } catch (error) {
        console.error('Error in main search:', error);
        statusElement.innerHTML = `<span class="error">Error: ${error.message}</span>. Check the console for details.`;
    }
}

/**
 * Calls Gemini to convert natural language text into an optimized English query.
 * @param {string} textoBusca - The user's text input (e.g., "documentos referentes a missão a lua").
 * @returns {Promise<string>} The structured query for NTRS (e.g., "lunar mission" OR "apollo program").
 */
async function traduzirBusca(textoBusca) {
    const prompt = `You are a natural language translator for the NTRS (NASA Technical Reports Server) Search API. Your only task is to analyze the user's search request and transform it into an optimized search query for the NTRS 'q' field.

RULES:
1. Output Format: Return ONLY the search string, without any explanation, introduction, or additional text.
2. Optimization: Use boolean operators (AND, OR, NOT) and double quotes (") for exact phrases, when appropriate, to refine the search.
3. Language: The search query MUST be in **English**, as NTRS documents and metadata are predominantly in English.

The user's request is: ${textoBusca}`;

    const url = `https://generativelanguage.googleapis.com/v1beta/models/${GEMINI_MODEL}:generateContent?key=${GEMINI_API_KEY}`;
    
    try {
        const response = await axios.post(url, {
            contents: [{ role: "user", parts: [{ text: prompt }] }]
        });
        
        // Extract the search string (the text generated by Gemini)
        return response.data.candidates[0].content.parts[0].text.trim();

    } catch (error) {
        console.error("Error calling the Gemini API:", error);
        throw new Error("Failed to translate the search. Check your Gemini API key and the console.");
    }
}

// THE PUBLIC PROXY to bypass CORS.
// ATTENTION: Use with caution and at your own risk, as it is a third-party service.
const CORS_PROXY = 'https://api.allorigins.win/get?url='; 


/**
 * Searches for reports USING A PUBLIC CORS PROXY to bypass browser blocking.
 * @param {string} queryEstruturada - The query generated by Gemini.
 */
async function buscarRelatoriosNASA(queryEstruturada) {
    // 1. Build the final NASA NTRS URL
    const nasaUrlFinal = `${NASA_NTRS_ENDPOINT}?q=${queryEstruturada}&limit=50`;

    console.log ("Log ->" + nasaUrlFinal);
    // 2. ENCODE THE ENTIRE NASA URL and prefix it with the proxy.
    // The proxy expects the target URL as a parameter and encoded.
    const urlBuscaComProxy = CORS_PROXY + encodeURIComponent(nasaUrlFinal);

    try {
        const response = await axios.get(urlBuscaComProxy);
        
        // 1. EXTRACT THE NASA JSON STRING FROM THE PROXY'S JSON
        const nasaJsonString = response.data.contents; 
        
        if (!nasaJsonString) {
            // If the proxy returns something, but without the 'contents' field, it's a proxy error.
             throw new Error("The proxy did not return the expected NASA content.");
        }

        // 2. CONVERT THE NASA JSON STRING TO A JAVASCRIPT OBJECT
        const nasaResponse = JSON.parse(nasaJsonString); 

        // 3. ACCESS THE 'results' FIELD OF THE REAL NASA OBJECT
        // We use the OR syntax to ensure that if 'results' doesn't exist, 'data' is an empty array []
        const data = nasaResponse.results || []; 
        
        // **CHECK THE ARRAY**
        if (data.length === 0) {
            // NOTE: To be sure, you can check if nasaResponse.stats.total is > 0
            document.getElementById('resultsBody').innerHTML = '<tr><td colspan="4">No documents found (total: 0).</td></tr>';
            return;
        }
        
        // DEBUG: If you want to see the data being passed:
        console.log("NASA results for display:", data);

        renderizarResultados(data); // Calls your display function
    } catch (error) {
        console.error("Error searching the NASA API via Proxy:", error.response ? error.response.data : error.message);
        throw new Error("Search failed. The CORS Proxy might be offline or NASA blocked the Proxy request.");
    }
}

/**
 * Creates the table rows with NTRS data.
 * @param {Array<Object>} documentos - Array of document objects returned by NASA.
 */
function renderizarResultados(documentos) {
    const resultsBody = document.getElementById('resultsBody');
    resultsBody.innerHTML = ''; // Clear previous results

    documentos.forEach(doc => {
        
        // --- CORRECTED DATA EXTRACTION ---
        
        // 1. Prioritize distributionDate (more common and accurate)
        const rawDate = doc.distributionDate 
                        // 2. Fallback to submittedDate (when the document was submitted)
                        ?? doc.submittedDate 
                        // 3. Fallback to the record creation date
                        ?? doc.created; 
        
        // If any date was found, extract only the YYYY-MM-DD part
        const data = rawDate ? rawDate.substring(0, 10) : 'N/A';


        // Extract Title, Abstract, and Link (kept from the previous code)
        const titulo = doc.title ?? 'N/A';
        const resumo = doc.abstract 
            ?? (doc.description ? doc.description.substring(0, 150) + '...' : 'No abstract.');
        
        const pdfLinkPart = doc.downloads?.[0]?.links?.pdf 
                         ?? doc.downloads?.[0]?.links?.original;
        const linkCompleto = pdfLinkPart 
            ? `https://ntrs.nasa.gov${pdfLinkPart}` 
            : `https://ntrs.nasa.gov/citations/${doc.id}`; 
        
        // --- INSERTION INTO THE TABLE ---
        const row = resultsBody.insertRow();
        row.insertCell().innerHTML = titulo;
        row.insertCell().textContent = data; // NOW IT SHOULD SHOW THE CORRECT DATE
        row.insertCell().textContent = resumo;
        row.insertCell().innerHTML = `<a href="${linkCompleto}" target="_blank">View Document</a>`;
    });
}
